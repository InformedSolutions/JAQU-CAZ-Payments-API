################################################### DEV Steps ########################################################

kind: pipeline
type: docker
name: payments-api-dev

trigger:
  branch:
    - iac-restructure-baseline
  event:
    - pull_request
    - push
concurrency:
  limit: 1

volumes:
  - name: docker_sock
    host:
      path: /var/run/docker.sock

  - name: package_directory
    temp: {}

  - name: m2_repo
    temp: {}

services:
  - name: postgres
    image: postgres:11-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: vehicle_compliance
    ports:
      - 5432
  - name: localstack
    image: localstack/localstack:0.10.2
    environment:
      SERVICES: sqs, secretsmanager
      HOSTNAME_EXTERNAL: localstack
    ports:
      - 4576
      - 4584
  - name: redis
    image: redis

steps:

  # Clean agent images and containers to prevent disk space overuse
  - name: clean agent
    image: docker
    commands:
      - docker system prune -f
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  # Build docker images
  - name: build docker maven base
    image: docker
    commands:
      - docker build -t payments-api-base -f ci-cd-resources/Dockerfile.ci.base .
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  # Unit test
  - name: unit test
    image: payments-api-base
    pull: never
    volumes:
      - name: package_directory
        path: /drone/src/target
      - name: m2_repo
        path: /root/.m2
    commands:
      - mvn test -P jacoco --no-transfer-progress
    environment:
      JAQU_NEXUS_URL:
        from_secret: jaqu_lower_nexus_url
      JAQU_NEXUS_USER:
        from_secret: jaqu_lower_nexus_username
      JAQU_NEXUS_PASSWORD:
        from_secret: jaqu_lower_nexus_password

  # # Integration tests
  # - name: integration test
  #   image: payments-api-base
  #   pull: never
  #   volumes:
  #     - name: package_directory
  #       path: /drone/src/target
  #     - name: m2_repo
  #       path: /root/.m2
  #   environment:
  #     BUILD_ID: ${DRONE_BUILD_NUMBER}
  #     SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/vehicle_compliance
  #     JAQU_NEXUS_URL:
  #       from_secret: jaqu_lower_nexus_url
  #     JAQU_NEXUS_USER:
  #       from_secret: jaqu_lower_nexus_username
  #     JAQU_NEXUS_PASSWORD:
  #       from_secret: jaqu_lower_nexus_password
  #     AWS_SQS_URL: localstack:4576
  #     AWS_SECRETSMANAGER_URL: localstack:4584
  #     REDIS_URL: redis
  #     REDIS_CUSTOM_PORT: 6379
  #   commands:
  #     - mvn verify -DskipUnitTests -P jacoco --no-transfer-progress

  # Scan with sonar
  - name: sonar scan
    image: payments-api-base
    volumes:
      - name: package_directory
        path: /drone/src/target
      - name: m2_repo
        path: /root/.m2
    environment:
      JAQU_NEXUS_URL:
        from_secret: jaqu_lower_nexus_url
      JAQU_NEXUS_USER:
        from_secret: jaqu_lower_nexus_username
      JAQU_NEXUS_PASSWORD:
        from_secret: jaqu_lower_nexus_password
      SONAR_HOST:
        from_secret: jaqu_lower_sonar_host
      SONAR_TOKEN:
        from_secret: jaqu_lower_sonar_token
    pull: never
    commands:
      #  TODO add src/test/java to sonar.tests once they are present
      - mvn sonar:sonar -Dsonar.host.url=$SONAR_HOST
        -Dsonar.projectName=${DRONE_REPO}
        -Dsonar.login=$SONAR_TOKEN
        -Dsonar.coverage.jacoco.xmlReportPaths=/drone/src/target/site/jacoco-aggregate/jacoco.xml
        -Dsonar.tests=src/it/java
        --no-transfer-progress

  # Package
  - name: package
    image: payments-api-base
    volumes:
      - name: package_directory
        path: /drone/src/target
      - name: m2_repo
        path: /root/.m2
    environment:
      JAQU_NEXUS_URL:
        from_secret: jaqu_lower_nexus_url
      JAQU_NEXUS_USER:
        from_secret: jaqu_lower_nexus_username
      JAQU_NEXUS_PASSWORD:
        from_secret: jaqu_lower_nexus_password
      BUILD_ID: ${DRONE_BUILD_NUMBER}
    pull: never
    commands:
      - mvn package -DskipUnitTests

  # Invoke terraform scripts to deploy lambda function
  - name: deploy to dev
    image: hashicorp/terraform:0.12.3
    volumes:
      - name: package_directory
        path: /opt/package
    commands:
      - apk update && apk add bash
      - mkdir ~/.ssh
      - echo -e "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - git checkout iac_restructure_baseline
      - export TF_VAR_lambda_file=$(ls /opt/package/*.zip | tail -1)
      - cd terraform-iac/projects/payments/layers/01.networking
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select dev || tf workspace new dev
      - tf apply -auto-approve
      - cd ../02.backends
      - tf init
      - tf workspace select dev || tf workspace new dev
      - tf apply -auto-approve
      - cd ../03.api
      - tf init
      - tf workspace select dev || tf workspace new dev
      - tf apply -auto-approve
    environment:
      TF_VAR_access_key:
        from_secret: jaqu_lower_aws_access_key_id
      TF_VAR_secret_key:
        from_secret: jaqu_lower_aws_secret_access_key
      TF_VAR_master_access_key:
        from_secret: jaqu_master_aws_access_key_id
      TF_VAR_master_secret_key:
        from_secret: jaqu_master_aws_secret_access_key
      TF_VAR_account_id:
        from_secret: jaqu_lower_aws_account_id
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_lower_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_lower_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_NAME: jaqu-lower
      GIT_PRIVATE_SSH:
        from_secret: jaqu_lower_github_private_key
    when:
      event:
        - push

  # Invokes lambda function with $LATEST alias to deploy schema migrations prior to code deploy rollover
  - name: apply db schema migrations
    image: alpine:3.11.6
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - >
        aws lambda invoke --invocation-type RequestResponse --function-name payments-lambda-dev --payload "{\"requestContext\": {\"identity\": {}},\"httpMethod\": \"POST\",\"path\": \"/v1/migrate-db\", \"multiValueHeaders\":{\"x-correlation-id\":[\"f09c6856-9746-4d48-813f-3a31f25f96a2\"]}}" output.json --profile target_acc
      - status_code=$(cat output.json | jq '.statusCode')
      - if [ $status_code == "200" ]; then exit 0; else exit 1; fi
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_lower_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_lower_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_ROLE: arn:aws:iam::311075478274:role/jaqu-lowerServiceRole
    when:
      event:
        - push

  - name: codedeploy api dev
    image: alpine:3.11.6
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/CodeDeploy/deploy_lambda.sh . --profile target_acc
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/CodeDeploy/deploy_dangling_payments.sh . --profile target_acc
      - bash deploy_lambda.sh
      - bash deploy_dangling_payments.sh
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_lower_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_lower_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_ROLE: arn:aws:iam::311075478274:role/jaqu-lowerServiceRole
      PROJECT: payments
      DEPLOY_ENVIRONMENT: dev
      LAMBDA_BUCKET: jaqu-shared-project-lambda-bucket
    when:
      event:
        - push


  ################################################# End DEV Steps #######################################################

---
################################################### ST Environment Steps ########################################################

kind: pipeline
type: docker
name: payments-api-st

trigger:
  branch:
    - iac-restructure-controlled-st
  event:
    - pull_request
    - push
concurrency:
  limit: 1

volumes:
  - name: docker_sock
    host:
      path: /var/run/docker.sock

  - name: package_directory
    temp: {}

  - name: m2_repo
    temp: {}

services:
  - name: postgres
    image: postgres:11-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: vehicle_compliance
    ports:
      - 5432
  - name: localstack
    image: localstack/localstack:0.10.2
    environment:
      SERVICES: sqs, secretsmanager
      HOSTNAME_EXTERNAL: localstack
    ports:
      - 4576
      - 4584
  - name: redis
    image: redis

steps:

  # Clean agent images and containers to prevent disk space overuse
  - name: clean agent
    image: docker
    commands:
      - docker system prune -f
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  # Build docker images
  - name: build docker maven base
    image: docker
    commands:
      - docker build -t payments-api-base -f ci-cd-resources/Dockerfile.ci.base .
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  # Unit test
  - name: unit test
    image: payments-api-base
    pull: never
    volumes:
      - name: package_directory
        path: /drone/src/target
      - name: m2_repo
        path: /root/.m2
    commands:
      - mvn test -P jacoco --no-transfer-progress
    environment:
      JAQU_NEXUS_URL:
        from_secret: jaqu_lower_nexus_url
      JAQU_NEXUS_USER:
        from_secret: jaqu_lower_nexus_username
      JAQU_NEXUS_PASSWORD:
        from_secret: jaqu_lower_nexus_password

  # # Integration tests
  # - name: integration test
  #   image: payments-api-base
  #   pull: never
  #   volumes:
  #     - name: package_directory
  #       path: /drone/src/target
  #     - name: m2_repo
  #       path: /root/.m2
  #   environment:
  #     BUILD_ID: ${DRONE_BUILD_NUMBER}
  #     SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/vehicle_compliance
  #     JAQU_NEXUS_URL:
  #       from_secret: jaqu_lower_nexus_url
  #     JAQU_NEXUS_USER:
  #       from_secret: jaqu_lower_nexus_username
  #     JAQU_NEXUS_PASSWORD:
  #       from_secret: jaqu_lower_nexus_password
  #     AWS_SQS_URL: localstack:4576
  #     AWS_SECRETSMANAGER_URL: localstack:4584
  #     REDIS_URL: redis
  #     REDIS_CUSTOM_PORT: 6379
  #   commands:
  #     - mvn verify -DskipUnitTests -P jacoco --no-transfer-progress

  # Scan with sonar
  - name: sonar scan
    image: payments-api-base
    volumes:
      - name: package_directory
        path: /drone/src/target
      - name: m2_repo
        path: /root/.m2
    environment:
      JAQU_NEXUS_URL:
        from_secret: jaqu_lower_nexus_url
      JAQU_NEXUS_USER:
        from_secret: jaqu_lower_nexus_username
      JAQU_NEXUS_PASSWORD:
        from_secret: jaqu_lower_nexus_password
      SONAR_HOST:
        from_secret: jaqu_lower_sonar_host
      SONAR_TOKEN:
        from_secret: jaqu_lower_sonar_token
    pull: never
    commands:
      #  TODO add src/test/java to sonar.tests once they are present
      - mvn sonar:sonar -Dsonar.host.url=$SONAR_HOST
        -Dsonar.projectName=${DRONE_REPO}
        -Dsonar.login=$SONAR_TOKEN
        -Dsonar.coverage.jacoco.xmlReportPaths=/drone/src/target/site/jacoco-aggregate/jacoco.xml
        -Dsonar.tests=src/it/java
        --no-transfer-progress

  # Package
  - name: package
    image: payments-api-base
    volumes:
      - name: package_directory
        path: /drone/src/target
      - name: m2_repo
        path: /root/.m2
    environment:
      JAQU_NEXUS_URL:
        from_secret: jaqu_lower_nexus_url
      JAQU_NEXUS_USER:
        from_secret: jaqu_lower_nexus_username
      JAQU_NEXUS_PASSWORD:
        from_secret: jaqu_lower_nexus_password
      BUILD_ID: ${DRONE_BUILD_NUMBER}
    pull: never
    commands:
      - mvn package -DskipUnitTests

  - name: plan updates into st
    image: hashicorp/terraform:0.12.3
    volumes:
      - name: package_directory
        path: /opt/package
    commands:
      - apk update && apk add bash
      - mkdir ~/.ssh
      - echo -e "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - git checkout iac_restructure_controlled
      - export TF_VAR_lambda_file=$(ls /opt/package/*.zip | tail -1)
      - cd terraform-iac/projects/payments/layers/01.networking
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select st || tf workspace new st
      - tf plan
      - cd ../02.backends
      - tf init
      - tf workspace select st || tf workspace new st
      - tf plan
      - cd ../03.api
      - tf init
      - tf workspace select st || tf workspace new st
      - tf plan
    environment:
      TF_VAR_access_key:
        from_secret: jaqu_controlled_aws_access_key_id
      TF_VAR_secret_key:
        from_secret: jaqu_controlled_aws_secret_access_key
      TF_VAR_master_access_key:
        from_secret: jaqu_master_aws_access_key_id
      TF_VAR_master_secret_key:
        from_secret: jaqu_master_aws_secret_access_key
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_controlled_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_controlled_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_NAME: jaqu-controlled
      GIT_PRIVATE_SSH:
        from_secret: jaqu_lower_github_private_key
    when:
      event:
        - push

  - name: provisioning warning
    image: docker:git
    commands:
      - echo "Pipeline failed. If a deployment is being made for the first time into an environment terraform backends will not yet exist which means this is to be expected. If not terraform related, please see logs for further details"
    when:
      status:
        - failure

  # Invoke terraform scripts to deploy lambda function
  - name: deploy to st
    image: hashicorp/terraform:0.12.3
    volumes:
      - name: package_directory
        path: /opt/package
    commands:
      - apk update && apk add bash
      - mkdir ~/.ssh
      - echo -e "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - cd JAQU-CAZ-IAC
      - git checkout iac_restructure_controlled
      - export TF_VAR_lambda_file=$(ls /opt/package/*.zip | tail -1)
      - cd terraform-iac/projects/payments/layers/01.networking
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select st || tf workspace new st
      - tf apply -auto-approve
      - cd ../02.backends
      - tf init
      - tf workspace select st || tf workspace new st
      - tf apply -auto-approve
      - cd ../03.api
      - tf init
      - tf workspace select st || tf workspace new st
      - tf apply -auto-approve
    environment:
      TF_VAR_access_key:
        from_secret: jaqu_controlled_aws_access_key_id
      TF_VAR_secret_key:
        from_secret: jaqu_controlled_aws_secret_access_key
      TF_VAR_master_access_key:
        from_secret: jaqu_master_aws_access_key_id
      TF_VAR_master_secret_key:
        from_secret: jaqu_master_aws_secret_access_key
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_controlled_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_controlled_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_NAME: jaqu-controlled
      GIT_PRIVATE_SSH:
        from_secret: jaqu_lower_github_private_key
    when:
      event:
        - push

  # Invokes lambda function with $LATEST alias to deploy schema migrations prior to code deploy rollover
  - name: apply db schema migrations
    image: alpine:3.11.6
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - >
        aws lambda invoke --invocation-type RequestResponse --function-name payments-lambda-st --payload "{\"requestContext\": {\"identity\": {}},\"httpMethod\": \"POST\",\"path\": \"/v1/migrate-db\", \"multiValueHeaders\":{\"x-correlation-id\":[\"f09c6856-9746-4d48-813f-3a31f25f96a2\"]}}" output.json --profile target_acc
      - status_code=$(cat output.json | jq '.statusCode')
      - if [ $status_code == "200" ]; then exit 0; else exit 1; fi
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_controlled_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_controlled_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_ROLE: arn:aws:iam::072187228077:role/jaqu-controlledServiceRole
    when:
      event:
        - push

  - name: codedeploy api st
    image: alpine:3.11.6
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/CodeDeploy/deploy_lambda.sh . --profile target_acc
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/CodeDeploy/deploy_dangling_payments.sh . --profile target_acc
      - bash deploy_lambda.sh
      - bash deploy_dangling_payments.sh
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_lower_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_lower_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_ROLE: arn:aws:iam::072187228077:role/jaqu-controlledServiceRole
      PROJECT: payments
      DEPLOY_ENVIRONMENT: st
      LAMBDA_BUCKET: jaqu-shared-project-lambda-bucket
    when:
      event:
        - push


  ################################################# st environment Steps #######################################################

  ################################################ Secrets #########################################################

---
kind: secret
name: jaqu_lower_aws_access_key_id
get:
  path: /build-tools/drone
  name: awsLowerAccessKeyId

---
kind: secret
name: jaqu_lower_aws_secret_access_key
get:
  path: /build-tools/drone
  name: awsLowerSecretAccessKey

---
kind: secret
name: jaqu_controlled_aws_access_key_id
get:
  path: /build-tools/drone
  name: awsControlledAccessKeyId

---
kind: secret
name: jaqu_controlled_aws_secret_access_key
get:
  path: /build-tools/drone
  name: awsControlledSecretAccessKey

---
kind: secret
name: jaqu_master_aws_access_key_id
get:
  path: /build-tools/drone
  name: awsMasterAccessKeyId

---
kind: secret
name: jaqu_master_aws_secret_access_key
get:
  path: /build-tools/drone
  name: awsMasterSecretAccessKey

---
kind: secret
name: jaqu_lower_sonar_host
get:
  path: /build-tools/drone
  name: sonarHost

---
kind: secret
name: jaqu_lower_sonar_token
get:
  path: /build-tools/drone
  name: sonarToken

---
kind: secret
name: jaqu_lower_github_private_key
get:
  path: /build-tools/drone
  name: githubPrivateKey

---
kind: secret
name: jaqu_lower_nexus_url
get:
  path: /build-tools/drone
  name: nexusUrl

---
kind: secret
name: jaqu_lower_nexus_username
get:
  path: /build-tools/drone
  name: nexusUsername

---
kind: secret
name: jaqu_lower_nexus_password
get:
  path: /build-tools/drone
  name: nexusPassword

---
kind: secret
name: charge_settlement_id
get:
  path: /build-tools/drone
  name: chargeSettlementId

---
kind: secret
name: charge_settlement_secret
get:
  path: /build-tools/drone
  name: chargeSettlementSecret

---
kind: secret
name: charge_settlement_cognito_id
get:
  path: /build-tools/drone
  name: chargeSettlementCognitoId

---
kind: secret
name: charge_settlement_id_St
get:
  path: /build-tools/drone
  name: chargeSettlementIdSt

---
kind: secret
name: charge_settlement_secret_St
get:
  path: /build-tools/drone
  name: chargeSettlementSecretSt


  ################################################ End Secrets #########################################################
