#################################################### Nightly Steps ############################################################
kind: pipeline
type: docker
name: payments-api-nightly
trigger:
  event:
    - cron
concurrency:
  limit: 1
volumes:
  - name: docker_sock
    host:
      path: /var/run/docker.sock

steps:

  # Build Docker Image for Running Maven
  - name: build docker maven base
    image: docker:19.03.11-git
    commands:
      - docker build -t vccs-api-base -f ci-cd-resources/Dockerfile.ci.base .
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  - name: owasp dependency scan
    image: payments-api-base
    pull: never
    commands:
      - mvn org.owasp:dependency-check-maven:check -P security
    environment:
      JAQU_NEXUS_URL:
        from_secret: jaqu_lower_nexus_url
      JAQU_NEXUS_USER:
        from_secret: jaqu_lower_nexus_username
      JAQU_NEXUS_PASSWORD:
        from_secret: jaqu_lower_nexus_password

     # Build end to end tests docker image
  - name: build end to end test image
    image: docker:19.03.11-git
    commands:
      - mkdir ~/.ssh
      - echo -e "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-QA-selenium.git
      - cd JAQU-CAZ-QA-selenium
      - docker build -t selenium-jaqu .
    environment:
      GIT_PRIVATE_SSH:
        from_secret: jaqu_lower_github_private_key
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  # Run end to end tests
  - name: run api end to end tests
    image: selenium-jaqu
    pull: never
    environment:
      BASEURL_CHARGE_SETTLEMENT_OAUTH: 'https://payments-userpool-dev.auth.eu-west-2.amazoncognito.com'
      BASEURL_CHARGE_SETTLEMENT_API: 'https://dev-api.paycleanairzonecharge.co.uk'
      CHARGE_SETTLEMENT_CLIENT_ID:
        from_secret: charge_settlement_id
      CHARGE_SETTLEMENT_CLIENT_SECRET:
        from_secret:  charge_settlement_secret
      CHARGE_SETTLEMENT_COGNITO_ID:
        from_secret: charge_settlement_cognito_id
      LOCATION: 'local'
    commands:
      - cd JAQU-CAZ-QA-selenium
      - cucumber -t @CHARGESETTLEMENT --retry 2

  # execute jmeter micro perf scripts
  - name: micro-performance tests	
    image: blazemeter/taurus	
    environment:	
      CHARGE_SETTLEMENT_CLIENT_ID:
        from_secret: charge_settlement_id
      CHARGE_SETTLEMENT_CLIENT_SECRET:
        from_secret:  charge_settlement_secret
      CHARGE_SETTLEMENT_COGNITO_ID:
        from_secret: charge_settlement_cognito_id
    commands:	
      - bzt -o modules.jmeter.properties.theapikey=$CHARGE_SETTLEMENT_COGNITO_ID -o modules.jmeter.properties.theclientid=$CHARGE_SETTLEMENT_CLIENT_ID -o modules.jmeter.properties.theclientsecret=$CHARGE_SETTLEMENT_CLIENT_SECRET jmeter/micro-perf-payment-info.jmx jmeter/assertion.yml	
    volumes:	
      - name: docker_sock	
        path: /var/run/docker.sock


################################################# End Nightly Steps ############################################################

---

################################################### Dev Environment Steps ########################################################
kind: pipeline
type: docker
name: payments-api-dev

trigger:
  branch:
    - develop
  event:
    - pull_request
    - push
concurrency:
  limit: 1

volumes:
  - name: docker_sock
    host:
      path: /var/run/docker.sock

  - name: package_directory
    temp: {}

  - name: m2_repo
    temp: {}

services:
  - name: postgres
    image: postgres:11-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: vehicle_compliance
    ports:
      - 5432

  - name: localstack
    image: localstack/localstack:0.10.2
    environment:
      SERVICES: s3, sqs, secretsmanager
      HOSTNAME_EXTERNAL: localstack
    ports:
      - 4572
      - 4576
      - 4584

  - name: redis
    image: redis:alpine3.12
    ports:
      - 6379
steps:

  # Build docker images
  - name: build docker maven base
    image: docker:19.03.11-git
    commands:
      - docker build -t payments-api-base -f ci-cd-resources/Dockerfile.ci.base .
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  # Unit test
  - name: unit test
    image: payments-api-base
    pull: never
    volumes:
      - name: package_directory
        path: /drone/src/target
      - name: m2_repo
        path: /root/.m2
    commands:
      - mvn test -P jacoco --no-transfer-progress
    environment:
      JAQU_NEXUS_URL:
        from_secret: jaqu_lower_nexus_url
      JAQU_NEXUS_USER:
        from_secret: jaqu_lower_nexus_username
      JAQU_NEXUS_PASSWORD:
        from_secret: jaqu_lower_nexus_password

  # Integration tests
  - name: integration test
    image: payments-api-base
    pull: never
    volumes:
      - name: package_directory
        path: /drone/src/target
      - name: m2_repo
        path: /root/.m2
    environment:
      BUILD_ID: ${DRONE_BUILD_NUMBER}
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/vehicle_compliance
      JAQU_NEXUS_URL:
        from_secret: jaqu_lower_nexus_url
      JAQU_NEXUS_USER:
        from_secret: jaqu_lower_nexus_username
      JAQU_NEXUS_PASSWORD:
        from_secret: jaqu_lower_nexus_password
      AWS_SQS_URL: localstack:4576
      AWS_S3_URL: localstack:4572
      AWS_SECRETSMANAGER_URL: localstack:4584
      REDIS_URL: redis
      REDIS_CUSTOM_PORT: 6379
    commands:
      - mvn verify -DskipUnitTests -P jacoco --no-transfer-progress

  # Scan with sonar
  - name: sonar scan
    image: payments-api-base
    volumes:
      - name: package_directory
        path: /drone/src/target
      - name: m2_repo
        path: /root/.m2
    environment:
      JAQU_NEXUS_URL:
        from_secret: jaqu_lower_nexus_url
      JAQU_NEXUS_USER:
        from_secret: jaqu_lower_nexus_username
      JAQU_NEXUS_PASSWORD:
        from_secret: jaqu_lower_nexus_password
      SONAR_HOST:
        from_secret: jaqu_lower_sonar_host
      SONAR_TOKEN:
        from_secret: jaqu_lower_sonar_token
    pull: never
    commands:
      #  TODO add src/test/java to sonar.tests once they are present
      - mvn sonar:sonar -Dsonar.host.url=$SONAR_HOST
        -Dsonar.projectName=${DRONE_REPO}
        -Dsonar.login=$SONAR_TOKEN
        -Dsonar.coverage.jacoco.xmlReportPaths=/drone/src/target/site/jacoco-aggregate/jacoco.xml
        -Dsonar.tests=src/it/java
        --no-transfer-progress

  # Package
  - name: package
    image: payments-api-base
    volumes:
      - name: package_directory
        path: /drone/src/target
      - name: m2_repo
        path: /root/.m2
    environment:
      JAQU_NEXUS_URL:
        from_secret: jaqu_lower_nexus_url
      JAQU_NEXUS_USER:
        from_secret: jaqu_lower_nexus_username
      JAQU_NEXUS_PASSWORD:
        from_secret: jaqu_lower_nexus_password
      BUILD_ID: ${DRONE_BUILD_NUMBER}
    pull: never
    commands:
      - mvn package -DskipUnitTests

  # Invoke terraform scripts to deploy lambda function
  - name: deploy to dev
    image: hashicorp/terraform:0.12.23
    volumes:
      - name: package_directory
        path: /opt/package
    commands:
      - apk update && apk add bash
      - mkdir ~/.ssh
      - echo -e "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - git checkout lower_dev
      - export TF_VAR_lambda_file=$(ls /opt/package/*.zip | tail -1)
      - cd terraform-iac/projects/payments/layers/01.networking
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select dev || tf workspace new dev
      - tf apply -auto-approve
      - cd ../02.backends
      - tf init
      - tf workspace select dev || tf workspace new dev
      - tf apply -auto-approve
      - cd ../03.api
      - tf init
      - tf workspace select dev || tf workspace new dev
      - tf apply -auto-approve
    environment:
      TF_VAR_access_key:
        from_secret: jaqu_lower_aws_access_key_id
      TF_VAR_secret_key:
        from_secret: jaqu_lower_aws_secret_access_key
      TF_VAR_master_access_key:
        from_secret: jaqu_master_aws_access_key_id
      TF_VAR_master_secret_key:
        from_secret: jaqu_master_aws_secret_access_key
      TF_VAR_account_id:
        from_secret: jaqu_lower_aws_account_id
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_lower_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_lower_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_NAME: jaqu-lower
      GIT_PRIVATE_SSH:
        from_secret: jaqu_lower_github_private_key
    when:
      event:
        - push

  # Invokes lambda function with $LATEST alias to deploy schema migrations prior to code deploy rollover
  - name: apply db schema migrations
    image: alpine:3.11.6
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - >
        aws lambda invoke --invocation-type RequestResponse --function-name payments-lambda-dev --payload "{\"requestContext\": {\"identity\": {}},\"httpMethod\": \"POST\",\"path\": \"/v1/migrate-db\", \"multiValueHeaders\":{\"x-correlation-id\":[\"f09c6856-9746-4d48-813f-3a31f25f96a2\"]}}" output.json --profile target_acc
      - status_code=$(cat output.json | jq '.statusCode')
      - if [ $status_code == "200" ]; then exit 0; else exit 1; fi
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_lower_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_lower_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_ROLE: arn:aws:iam::311075478274:role/jaqu-lowerServiceRole
    when:
      event:
        - push

  - name: codedeploy api dev
    image: alpine:3.11.6
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/CodeDeploy/deploy_lambda.sh . --profile target_acc
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/CodeDeploy/deploy_dangling_payments.sh . --profile target_acc
      - bash deploy_lambda.sh
      - bash deploy_dangling_payments.sh
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_lower_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_lower_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_ROLE: arn:aws:iam::311075478274:role/jaqu-lowerServiceRole
      PROJECT: payments
      DEPLOY_ENVIRONMENT: dev
      LAMBDA_BUCKET: jaqu-shared-project-lambda-bucket
    when:
      event:
        - push

  # subscribe to operational monitoring alert in dev
  - name: subscribe to operational monitoring alert in dev
    image: alpine:3.11.6
    commands:
      - apk add --update python3 groff
      - pip3 install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - python3 ./ci-cd-resources/subscribe_to_alert_topics_iac_restructure.py -e freeable-memory -e 4xx -e usage -e evictions -e csv -i dev -i accounts JAQU-CAZ-OPERATIONALMONITORING@informed.com
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_lower_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_lower_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_ROLE: arn:aws:iam::311075478274:role/jaqu-lowerServiceRole
      PROJECT: payments
      DEPLOY_ENVIRONMENT: dev
    when:
      event:
        - push

  ################################################# End of Dev Environment Steps #######################################################

---
################################################### ST Environment Steps ########################################################
kind: pipeline
type: docker
name: payments-api-st

trigger:
  branch:
    - release-candidate/*
  event:
    - pull_request
    - push
concurrency:
  limit: 1

volumes:
  - name: docker_sock
    host:
      path: /var/run/docker.sock

  - name: package_directory
    temp: {}

  - name: m2_repo
    temp: {}

services:
  - name: postgres
    image: postgres:11-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: vehicle_compliance
    ports:
      - 5432

  - name: localstack
    image: localstack/localstack:0.10.2
    environment:
      SERVICES: s3, sqs, secretsmanager
      HOSTNAME_EXTERNAL: localstack
    ports:
      - 4572
      - 4576
      - 4584

  - name: redis
    image: redis:alpine3.12
    ports:
      - 6379

steps:

  # Clean agent images and containers to prevent disk space overuse
  - name: clean agent
    image: docker:19.03.11-git
    commands:
      - docker system prune -f
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  # Build docker images
  - name: build docker maven base
    image: docker:19.03.11-git
    commands:
      - docker build -t payments-api-base -f ci-cd-resources/Dockerfile.ci.base .
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  # Unit test
  - name: unit test
    image: payments-api-base
    pull: never
    volumes:
      - name: package_directory
        path: /drone/src/target
      - name: m2_repo
        path: /root/.m2
    commands:
      - mvn test -P jacoco --no-transfer-progress
    environment:
      JAQU_NEXUS_URL:
        from_secret: jaqu_lower_nexus_url
      JAQU_NEXUS_USER:
        from_secret: jaqu_lower_nexus_username
      JAQU_NEXUS_PASSWORD:
        from_secret: jaqu_lower_nexus_password

  # Integration tests
  - name: integration test
    image: payments-api-base
    pull: never
    volumes:
      - name: package_directory
        path: /drone/src/target
      - name: m2_repo
        path: /root/.m2
    environment:
      BUILD_ID: ${DRONE_BUILD_NUMBER}
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/vehicle_compliance
      JAQU_NEXUS_URL:
        from_secret: jaqu_lower_nexus_url
      JAQU_NEXUS_USER:
        from_secret: jaqu_lower_nexus_username
      JAQU_NEXUS_PASSWORD:
        from_secret: jaqu_lower_nexus_password
      AWS_SQS_URL: localstack:4576
      AWS_S3_URL: localstack:4572
      AWS_SECRETSMANAGER_URL: localstack:4584
      REDIS_URL: redis
      REDIS_CUSTOM_PORT: 6379
    commands:
      - mvn verify -DskipUnitTests -P jacoco --no-transfer-progress
      


  # Package
  - name: package
    image: payments-api-base
    volumes:
      - name: package_directory
        path: /drone/src/target
      - name: m2_repo
        path: /root/.m2
    environment:
      JAQU_NEXUS_URL:
        from_secret: jaqu_lower_nexus_url
      JAQU_NEXUS_USER:
        from_secret: jaqu_lower_nexus_username
      JAQU_NEXUS_PASSWORD:
        from_secret: jaqu_lower_nexus_password
      BUILD_ID: ${DRONE_BUILD_NUMBER}
    pull: never
    commands:
      - mvn package -DskipUnitTests

  - name: plan updates into st		
    image: hashicorp/terraform:0.12.23		
    volumes:		
      - name: package_directory		
        path: /opt/package		
    commands:		
      - apk update && apk add bash		
      - mkdir ~/.ssh		
      - echo -e "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa		
      - chmod 600 ~/.ssh/id_rsa		
      - touch ~/.ssh/known_hosts		
      - chmod 600 ~/.ssh/known_hosts		
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null		
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git		
      - cd JAQU-CAZ-IAC		
      - git checkout controlled_st		
      - export TF_VAR_lambda_file=$(ls /opt/package/*.zip | tail -1)		
      - cd terraform-iac/projects/payments/layers/01.networking		
      - PATH=$PATH:../../../../bin/		
      - chmod +x ../../../../bin/tf		
      - tf init		
      - tf workspace select st || tf workspace new st		
      - tf plan		
      - cd ../02.backends		
      - tf init		
      - tf workspace select st || tf workspace new st		
      - tf plan		
      - cd ../03.api		
      - tf init		
      - tf workspace select st || tf workspace new st		
      - tf plan		
    environment:		
      TF_VAR_access_key:		
        from_secret: jaqu_controlled_aws_access_key_id		
      TF_VAR_secret_key:		
        from_secret: jaqu_controlled_aws_secret_access_key		
      TF_VAR_master_access_key:		
        from_secret: jaqu_master_aws_access_key_id		
      TF_VAR_master_secret_key:		
        from_secret: jaqu_master_aws_secret_access_key		
      AWS_ACCESS_KEY_ID:		
        from_secret: jaqu_controlled_aws_access_key_id		
      AWS_SECRET_ACCESS_KEY:		
        from_secret: jaqu_controlled_aws_secret_access_key		
      AWS_DEFAULT_REGION: eu-west-2		
      AWS_ACCOUNT_NAME: jaqu-controlled		
      GIT_PRIVATE_SSH:		
        from_secret: jaqu_lower_github_private_key		
    when:		
      event:		
        - pull_request


  - name: provisioning warning
    image: docker:19.03.11-git
    commands:
      - echo "Pipeline failed. If a deployment is being made for the first time into an environment terraform backends will not yet exist which means this is to be expected. If not terraform related, please see logs for further details"
    when:
      status:
        - failure

  # Invoke terraform scripts to deploy lambda function
  - name: deploy to st
    image: hashicorp/terraform:0.12.23
    volumes:
      - name: package_directory
        path: /opt/package
    commands:
      - apk update && apk add bash
      - mkdir ~/.ssh
      - echo -e "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - git checkout controlled_st
      - export TF_VAR_lambda_file=$(ls /opt/package/*.zip | tail -1)
      - cd terraform-iac/projects/payments/layers/01.networking
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select st || tf workspace new st
      - tf apply -auto-approve
      - cd ../02.backends
      - tf init
      - tf workspace select st || tf workspace new st
      - tf apply -auto-approve
      - cd ../03.api
      - tf init
      - tf workspace select st || tf workspace new st
      - tf apply -auto-approve
    environment:
      TF_VAR_access_key:
        from_secret: jaqu_controlled_aws_access_key_id
      TF_VAR_secret_key:
        from_secret: jaqu_controlled_aws_secret_access_key
      TF_VAR_master_access_key:
        from_secret: jaqu_master_aws_access_key_id
      TF_VAR_master_secret_key:
        from_secret: jaqu_master_aws_secret_access_key
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_controlled_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_controlled_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_NAME: jaqu-controlled
      GIT_PRIVATE_SSH:
        from_secret: jaqu_lower_github_private_key
    when:
      event:
        - push

  # Invokes lambda function with $LATEST alias to deploy schema migrations prior to code deploy rollover
  - name: apply db schema migrations
    image: alpine:3.11.6
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - >
        aws lambda invoke --invocation-type RequestResponse --function-name payments-lambda-st --payload "{\"requestContext\": {\"identity\": {}},\"httpMethod\": \"POST\",\"path\": \"/v1/migrate-db\", \"multiValueHeaders\":{\"x-correlation-id\":[\"f09c6856-9746-4d48-813f-3a31f25f96a2\"]}}" output.json --profile target_acc
      - status_code=$(cat output.json | jq '.statusCode')
      - if [ $status_code == "200" ]; then exit 0; else exit 1; fi
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_controlled_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_controlled_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_ROLE: arn:aws:iam::072187228077:role/jaqu-controlledServiceRole
    when:
      event:
        - push

  - name: codedeploy api st
    image: alpine:3.11.6
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/CodeDeploy/deploy_lambda.sh . --profile target_acc
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/CodeDeploy/deploy_dangling_payments.sh . --profile target_acc
      - bash deploy_lambda.sh
      - bash deploy_dangling_payments.sh
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_controlled_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_controlled_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_ROLE: arn:aws:iam::072187228077:role/jaqu-controlledServiceRole
      PROJECT: payments
      DEPLOY_ENVIRONMENT: st
      LAMBDA_BUCKET: jaqu-shared-project-lambda-bucket
    when:
      event:
        - push


  # Build end to end tests docker image
  - name: build end to end test image
    image: docker:19.03.11-git
    commands:
      - mkdir ~/.ssh
      - echo -e "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-QA-selenium.git
      - cd JAQU-CAZ-QA-selenium
      - docker build -t selenium-jaqu .
    environment:
      GIT_PRIVATE_SSH:
        from_secret: jaqu_lower_github_private_key
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    when:
      event:
        - push

  # Run end to end tests
  - name: run api end to end tests
    image: selenium-jaqu
    pull: never
    environment:
      BASEURL_CHARGE_SETTLEMENT_OAUTH: 'https://payments-userpool-st.auth.eu-west-2.amazoncognito.com'
      BASEURL_CHARGE_SETTLEMENT_API: 'https://st-api.paycleanairzonecharge.co.uk'
      CHARGE_SETTLEMENT_CLIENT_ID:
        from_secret: charge_settlement_id_St
      CHARGE_SETTLEMENT_CLIENT_SECRET:
        from_secret:  charge_settlement_secret_St
      CHARGE_SETTLEMENT_COGNITO_ID:
        from_secret: charge_settlement_cognito_id
      LOCATION: 'local'
    commands:
      - sleep 8m
      - cd JAQU-CAZ-QA-selenium
      - cucumber -t @CHARGESETTLEMENT --retry 2
    when:
      event:
        - push

  # subscribe to operational monitoring alert in st
  - name: subscribe to operational monitoring alert in st
    image: alpine:3.11.6
    commands:
      - apk add --update python3 groff
      - pip3 install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - python3 ./ci-cd-resources/subscribe_to_alert_topics_iac_restructure.py -e freeable-memory -e 4xx -e usage -e evictions -e csv -i st -i payments JAQU-CAZ-OPERATIONALMONITORING@informed.com
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_controlled_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_controlled_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_ROLE: arn:aws:iam::072187228077:role/jaqu-controlledServiceRole
      PROJECT: payments
      DEPLOY_ENVIRONMENT: st
    when:
      event:
        - push

  ################################################# End of ST Environment Steps #######################################################

---

################################################### Start SIT Environment Steps ########################################################
kind: pipeline
type: docker
name: payments-api-sit

trigger:
  branch:
    - release/*
  event:
    - pull_request
    - push
concurrency:
  limit: 1

volumes:
  - name: docker_sock
    host:
      path: /var/run/docker.sock

  - name: package_directory
    temp: {}

  - name: m2_repo
    temp: {}

services:
  - name: postgres
    image: postgres:11-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: vehicle_compliance
    ports:
      - 5432

  - name: localstack
    image: localstack/localstack:0.10.2
    environment:
      SERVICES: s3, sqs, secretsmanager
      HOSTNAME_EXTERNAL: localstack
    ports:
      - 4572
      - 4576
      - 4584

  - name: redis
    image: redis:alpine3.12
    ports:
      - 6379
steps:

  # Clean agent images and containers to prevent disk space overuse
  - name: clean agent
    image: docker:19.03.11-git
    commands:
      - docker system prune -f
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  # Build docker images
  - name: build docker maven base
    image: docker:19.03.11-git
    commands:
      - docker build -t payments-api-base -f ci-cd-resources/Dockerfile.ci.base .
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  # Unit test
  - name: unit test
    image: payments-api-base
    pull: never
    volumes:
      - name: package_directory
        path: /drone/src/target
      - name: m2_repo
        path: /root/.m2
    commands:
      - mvn test -P jacoco --no-transfer-progress
    environment:
      JAQU_NEXUS_URL:
        from_secret: jaqu_lower_nexus_url
      JAQU_NEXUS_USER:
        from_secret: jaqu_lower_nexus_username
      JAQU_NEXUS_PASSWORD:
        from_secret: jaqu_lower_nexus_password

  # Integration tests
  - name: integration test
    image: payments-api-base
    pull: never
    volumes:
      - name: package_directory
        path: /drone/src/target
      - name: m2_repo
        path: /root/.m2
    environment:
      BUILD_ID: ${DRONE_BUILD_NUMBER}
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/vehicle_compliance
      JAQU_NEXUS_URL:
        from_secret: jaqu_lower_nexus_url
      JAQU_NEXUS_USER:
        from_secret: jaqu_lower_nexus_username
      JAQU_NEXUS_PASSWORD:
        from_secret: jaqu_lower_nexus_password
      AWS_SQS_URL: localstack:4576
      AWS_S3_URL: localstack:4572
      AWS_SECRETSMANAGER_URL: localstack:4584
      REDIS_URL: redis
      REDIS_CUSTOM_PORT: 6379
    commands:
      - mvn verify -DskipUnitTests -P jacoco --no-transfer-progress

  # Package
  - name: package
    image: payments-api-base
    volumes:
      - name: package_directory
        path: /drone/src/target
      - name: m2_repo
        path: /root/.m2
    environment:
      JAQU_NEXUS_URL:
        from_secret: jaqu_lower_nexus_url
      JAQU_NEXUS_USER:
        from_secret: jaqu_lower_nexus_username
      JAQU_NEXUS_PASSWORD:
        from_secret: jaqu_lower_nexus_password
      BUILD_ID: ${DRONE_BUILD_NUMBER}
    pull: never
    commands:
      - mvn package -DskipUnitTests

  - name: plan updates into sit
    image: hashicorp/terraform:0.12.23
    volumes:
      - name: package_directory
        path: /opt/package
    commands:
      - apk update && apk add bash
      - mkdir ~/.ssh
      - echo -e "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - git checkout controlled_sit
      - export TF_VAR_lambda_file=$(ls /opt/package/*.zip | tail -1)
      - cd terraform-iac/projects/payments/layers/01.networking
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select sit || tf workspace new sit
      - tf plan
      - cd ../02.backends
      - tf init
      - tf workspace select sit || tf workspace new sit
      - tf plan
      - cd ../03.api
      - tf init
      - tf workspace select sit || tf workspace new sit
      - tf plan
    environment:
      TF_VAR_access_key:
        from_secret: jaqu_controlled_aws_access_key_id
      TF_VAR_secret_key:
        from_secret: jaqu_controlled_aws_secret_access_key
      TF_VAR_master_access_key:
        from_secret: jaqu_master_aws_access_key_id
      TF_VAR_master_secret_key:
        from_secret: jaqu_master_aws_secret_access_key
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_controlled_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_controlled_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_NAME: jaqu-controlled
      GIT_PRIVATE_SSH:
        from_secret: jaqu_lower_github_private_key
    when:
      event:
        - pull_request

  - name: provisioning warning
    image: docker:19.03.11-git
    commands:
      - echo "Pipeline failed. If a deployment is being made for the first time into an environment terraform backends will not yet exist which means this is to be expected. If not terraform related, please see logs for further details"
    when:
      status:
        - failure

  # Invoke terraform scripts to deploy lambda function
  - name: deploy to sit
    image: hashicorp/terraform:0.12.23
    volumes:
      - name: package_directory
        path: /opt/package
    commands:
      - apk update && apk add bash
      - mkdir ~/.ssh
      - echo -e "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - git checkout controlled_sit
      - export TF_VAR_lambda_file=$(ls /opt/package/*.zip | tail -1)
      - cd terraform-iac/projects/payments/layers/01.networking
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select sit || tf workspace new sit
      - tf apply -auto-approve
      - cd ../02.backends
      - tf init
      - tf workspace select sit || tf workspace new sit
      - tf apply -auto-approve
      - cd ../03.api
      - tf init
      - tf workspace select sit || tf workspace new sit
      - tf apply -auto-approve
    environment:
      TF_VAR_access_key:
        from_secret: jaqu_controlled_aws_access_key_id
      TF_VAR_secret_key:
        from_secret: jaqu_controlled_aws_secret_access_key
      TF_VAR_master_access_key:
        from_secret: jaqu_master_aws_access_key_id
      TF_VAR_master_secret_key:
        from_secret: jaqu_master_aws_secret_access_key
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_controlled_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_controlled_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_NAME: jaqu-controlled
      GIT_PRIVATE_SSH:
        from_secret: jaqu_lower_github_private_key
    when:
      event:
        - push

  # Invokes lambda function with $LATEST alias to deploy schema migrations prior to code deploy rollover
  - name: apply db schema migrations
    image: alpine:3.11.6
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - >
        aws lambda invoke --invocation-type RequestResponse --function-name payments-lambda-sit --payload "{\"requestContext\": {\"identity\": {}},\"httpMethod\": \"POST\",\"path\": \"/v1/migrate-db\", \"multiValueHeaders\":{\"x-correlation-id\":[\"f09c6856-9746-4d48-813f-3a31f25f96a2\"]}}" output.json --profile target_acc
      - status_code=$(cat output.json | jq '.statusCode')
      - if [ $status_code == "200" ]; then exit 0; else exit 1; fi
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_controlled_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_controlled_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_ROLE: arn:aws:iam::072187228077:role/jaqu-controlledServiceRole
    when:
      event:
        - push

  - name: codedeploy api sit
    image: alpine:3.11.6
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/CodeDeploy/deploy_lambda.sh . --profile target_acc
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/CodeDeploy/deploy_dangling_payments.sh . --profile target_acc
      - bash deploy_lambda.sh
      - bash deploy_dangling_payments.sh
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_controlled_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_controlled_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_ROLE: arn:aws:iam::072187228077:role/jaqu-controlledServiceRole
      PROJECT: payments
      DEPLOY_ENVIRONMENT: sit
      LAMBDA_BUCKET: jaqu-shared-project-lambda-bucket
    when:
      event:
        - push

  # subscribe to operational monitoring alert in sit
  - name: subscribe to operational monitoring alert in sit
    image: alpine:3.11.6
    commands:
      - apk add --update python3 groff
      - pip3 install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - python3 ./ci-cd-resources/subscribe_to_alert_topics_iac_restructure.py -e freeable-memory -e 4xx -e usage -e evictions -e csv -i sit -i payments ISSupport-CAZ@informed.com
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_controlled_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_controlled_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_ROLE: arn:aws:iam::072187228077:role/jaqu-controlledServiceRole
      PROJECT: payments
      DEPLOY_ENVIRONMENT: sit
    when:
      event:
        - push

  ################################################# End of SIT Environment Steps #######################################################

---

################################################### Start Preprod Environment Steps ########################################################
kind: pipeline
type: docker
name: payments-api-preprod

trigger:
  branch:
    - staging
  event:
    - pull_request
    - push
concurrency:
  limit: 1

volumes:
  - name: package_directory
    temp: {}

steps:

  - name: plan updates into preprod
    image: hashicorp/terraform:0.12.23
    volumes:
      - name: package_directory
        path: /opt/package
    commands:
      - apk add --update bash python python-dev py-pip build-base jq wget
      - pip install awscli
      - mkdir ~/.ssh
      - echo -e "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $SRC_AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - LAMBDA_FUNCTION=payments-lambda-sit
      - ENV=sit
      - SIGNED_URL=`aws lambda get-function --profile target_acc --function-name $LAMBDA_FUNCTION --qualifier $ENV| jq --raw-output '.Code.Location'`
      - VERSION=`aws lambda get-function --profile target_acc --function-name $LAMBDA_FUNCTION --qualifier $ENV| jq --raw-output '.Configuration.Version'`
      - wget -O /opt/package/$LAMBDA_FUNCTION-$VERSION.zip $SIGNED_URL
      - export TF_VAR_lambda_file=/opt/package/$LAMBDA_FUNCTION-$VERSION.zip
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - git checkout staging_preprod
      - cd terraform-iac/projects/payments/layers/01.networking
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select preprod || tf workspace new preprod
      - tf plan
      - cd ../02.backends
      - tf init
      - tf workspace select preprod || tf workspace new preprod
      - tf plan
      - cd ../03.api
      - tf init
      - tf workspace select preprod || tf workspace new preprod
      - tf plan
    environment:
      TF_VAR_access_key:
        from_secret: jaqu_staging_aws_access_key_id
      TF_VAR_secret_key:
        from_secret: jaqu_staging_aws_secret_access_key
      TF_VAR_master_access_key:
        from_secret: jaqu_master_aws_access_key_id
      TF_VAR_master_secret_key:
        from_secret: jaqu_master_aws_secret_access_key
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_staging_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_staging_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      SRC_AWS_ACCOUNT_ROLE: arn:aws:iam::072187228077:role/jaqu-controlledServiceRole
      AWS_ACCOUNT_NAME: jaqu-staging
      GIT_PRIVATE_SSH:
        from_secret: jaqu_lower_github_private_key
    when:
      event:
        - pull_request

  - name: provisioning warning
    image: docker:19.03.11-git
    commands:
      - echo "Pipeline failed. If a deployment is being made for the first time into an environment terraform backends will not yet exist which means this is to be expected. If not terraform related, please see logs for further details"
    when:
      status:
        - failure

  # Invoke terraform scripts to deploy lambda function
  - name: deploy to preprod
    image: hashicorp/terraform:0.12.23
    volumes:
      - name: package_directory
        path: /opt/package
    commands:
      - apk add --update bash python python-dev py-pip build-base jq wget
      - pip install awscli
      - mkdir ~/.ssh
      - echo -e "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $SRC_AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - LAMBDA_FUNCTION=payments-lambda-sit
      - ENV=sit
      - SIGNED_URL=`aws lambda get-function --profile target_acc --function-name $LAMBDA_FUNCTION --qualifier $ENV| jq --raw-output '.Code.Location'`
      - VERSION=`aws lambda get-function --profile target_acc --function-name $LAMBDA_FUNCTION --qualifier $ENV| jq --raw-output '.Configuration.Version'`
      - wget -O /opt/package/$LAMBDA_FUNCTION-$VERSION.zip $SIGNED_URL
      - export TF_VAR_lambda_file=/opt/package/$LAMBDA_FUNCTION-$VERSION.zip
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - git checkout staging_preprod
      - cd terraform-iac/projects/payments/layers/01.networking
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select preprod || tf workspace new preprod
      - tf apply -auto-approve
      - cd ../02.backends
      - tf init
      - tf workspace select preprod || tf workspace new preprod
      - tf apply -auto-approve
      - cd ../03.api
      - tf init
      - tf workspace select preprod || tf workspace new preprod
      - tf apply -auto-approve
    environment:
      TF_VAR_access_key:
        from_secret: jaqu_staging_aws_access_key_id
      TF_VAR_secret_key:
        from_secret: jaqu_staging_aws_secret_access_key
      TF_VAR_master_access_key:
        from_secret: jaqu_master_aws_access_key_id
      TF_VAR_master_secret_key:
        from_secret: jaqu_master_aws_secret_access_key
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_staging_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_staging_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      SRC_AWS_ACCOUNT_ROLE: arn:aws:iam::072187228077:role/jaqu-controlledServiceRole
      AWS_ACCOUNT_NAME: jaqu-staging
      GIT_PRIVATE_SSH:
        from_secret: jaqu_lower_github_private_key
    when:
      event:
        - push

  # Invokes lambda function with $LATEST alias to deploy schema migrations prior to code deploy rollover
  - name: apply db schema migrations
    image: alpine:3.11.6
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - >
        aws lambda invoke --invocation-type RequestResponse --function-name payments-lambda-preprod --payload "{\"requestContext\": {\"identity\": {}},\"httpMethod\": \"POST\",\"path\": \"/v1/migrate-db\", \"multiValueHeaders\":{\"x-correlation-id\":[\"f09c6856-9746-4d48-813f-3a31f25f96a2\"]}}" output.json --profile target_acc
      - status_code=$(cat output.json | jq '.statusCode')
      - if [ $status_code == "200" ]; then exit 0; else exit 1; fi
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_staging_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_staging_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_ROLE: arn:aws:iam::360470905865:role/jaqu-stagingServiceRole
    when:
      event:
        - push

  - name: codedeploy api preprod
    image: alpine:3.11.6
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/CodeDeploy/deploy_lambda.sh . --profile target_acc
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/CodeDeploy/deploy_dangling_payments.sh . --profile target_acc
      - bash deploy_lambda.sh
      - bash deploy_dangling_payments.sh
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_staging_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_staging_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_ROLE: arn:aws:iam::360470905865:role/jaqu-stagingServiceRole
      PROJECT: payments
      DEPLOY_ENVIRONMENT: preprod
      LAMBDA_BUCKET: jaqu-shared-project-lambda-bucket
    when:
      event:
        - push

  # subscribe to operational monitoring alert in preprod
  - name: subscribe to operational monitoring alert in preprod
    image: alpine:3.11.6
    commands:
      - apk add --update python3 groff
      - pip3 install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - python3 ./ci-cd-resources/subscribe_to_alert_topics_iac_restructure.py -e freeable-memory -e 4xx -e usage -e evictions -e csv -i preprod -i payments ISSupport-CAZ@informed.com
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_staging_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_staging_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_ROLE: arn:aws:iam::360470905865:role/jaqu-stagingServiceRole
      PROJECT: payments
      DEPLOY_ENVIRONMENT: preprod
    when:
      event:
        - push

  ################################################# End of Preprod Environment Steps #######################################################



---
################################################### UAT Environment Steps ########################################################
kind: pipeline
type: docker
name: payments-api-uat

trigger:
  branch:
    - uat/*
  event:
    - pull_request
    - push
concurrency:
  limit: 1

volumes:
  - name: docker_sock
    host:
      path: /var/run/docker.sock

  - name: package_directory
    temp: {}

  - name: m2_repo
    temp: {}

services:
  - name: postgres
    image: postgres:11-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: vehicle_compliance
    ports:
      - 5432

  - name: localstack
    image: localstack/localstack:0.10.2
    environment:
      SERVICES: s3, sqs, secretsmanager
      HOSTNAME_EXTERNAL: localstack
    ports:
      - 4572
      - 4576
      - 4584

  - name: redis
    image: redis:alpine3.12
    ports:
      - 6379

steps:

  # Clean agent images and containers to prevent disk space overuse
  - name: clean agent
    image: docker:19.03.11-git
    commands:
      - docker system prune -f
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  # Build docker images
  - name: build docker maven base
    image: docker:19.03.11-git
    commands:
      - docker build -t payments-api-base -f ci-cd-resources/Dockerfile.ci.base .
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  # Unit test
  - name: unit test
    image: payments-api-base
    pull: never
    volumes:
      - name: package_directory
        path: /drone/src/target
      - name: m2_repo
        path: /root/.m2
    commands:
      - mvn test -P jacoco --no-transfer-progress
    environment:
      JAQU_NEXUS_URL:
        from_secret: jaqu_lower_nexus_url
      JAQU_NEXUS_USER:
        from_secret: jaqu_lower_nexus_username
      JAQU_NEXUS_PASSWORD:
        from_secret: jaqu_lower_nexus_password

  # # Integration tests
  # - name: integration test
  #   image: payments-api-base
  #   pull: never
  #   volumes:
  #     - name: package_directory
  #       path: /drone/src/target
  #     - name: m2_repo
  #       path: /root/.m2
  #   environment:
  #     BUILD_ID: ${DRONE_BUILD_NUMBER}
  #     SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/vehicle_compliance
  #     JAQU_NEXUS_URL:
  #       from_secret: jaqu_lower_nexus_url
  #     JAQU_NEXUS_USER:
  #       from_secret: jaqu_lower_nexus_username
  #     JAQU_NEXUS_PASSWORD:
  #       from_secret: jaqu_lower_nexus_password
  #     AWS_SQS_URL: localstack:4576
  #     AWS_S3_URL: localstack:4572
  #     AWS_SECRETSMANAGER_URL: localstack:4584
  #     REDIS_URL: redis
  #     REDIS_CUSTOM_PORT: 6379
  #   commands:
  #     - mvn verify -DskipUnitTests -P jacoco --no-transfer-progress

  # Package
  - name: package
    image: payments-api-base
    volumes:
      - name: package_directory
        path: /drone/src/target
      - name: m2_repo
        path: /root/.m2
    environment:
      JAQU_NEXUS_URL:
        from_secret: jaqu_lower_nexus_url
      JAQU_NEXUS_USER:
        from_secret: jaqu_lower_nexus_username
      JAQU_NEXUS_PASSWORD:
        from_secret: jaqu_lower_nexus_password
      BUILD_ID: ${DRONE_BUILD_NUMBER}
    pull: never
    commands:
      - mvn package -DskipUnitTests

  - name: plan updates into uat
    image: hashicorp/terraform:0.12.23
    volumes:
      - name: package_directory
        path: /opt/package
    commands:
      - apk update && apk add bash
      - mkdir ~/.ssh
      - echo -e "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - git checkout staging_uat
      - export TF_VAR_lambda_file=$(ls /opt/package/*.zip | tail -1)
      - cd terraform-iac/projects/payments/layers/01.networking
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select uat || tf workspace new uat
      - tf plan
      - cd ../02.backends
      - tf init
      - tf workspace select uat || tf workspace new uat
      - tf plan
      - cd ../03.api
      - tf init
      - tf workspace select uat || tf workspace new uat
      - tf plan
    environment:
      TF_VAR_access_key:
        from_secret: jaqu_staging_aws_access_key_id
      TF_VAR_secret_key:
        from_secret: jaqu_staging_aws_secret_access_key
      TF_VAR_master_access_key:
        from_secret: jaqu_master_aws_access_key_id
      TF_VAR_master_secret_key:
        from_secret: jaqu_master_aws_secret_access_key
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_staging_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_staging_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_NAME: jaqu-staging
      GIT_PRIVATE_SSH:
        from_secret: jaqu_lower_github_private_key
    when:
      event:
        - pull_request

  - name: provisioning warning
    image: docker:19.03.11-git
    commands:
      - echo "Pipeline failed. If a deployment is being made for the first time into an environment terraform backends will not yet exist which means this is to be expected. If not terraform related, please see logs for further details"
    when:
      status:
        - failure

  # Invoke terraform scripts to deploy lambda function
  - name: deploy to uat
    image: hashicorp/terraform:0.12.23
    volumes:
      - name: package_directory
        path: /opt/package
    commands:
      - apk update && apk add bash
      - mkdir ~/.ssh
      - echo -e "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - git checkout staging_uat
      - export TF_VAR_lambda_file=$(ls /opt/package/*.zip | tail -1)
      - cd terraform-iac/projects/payments/layers/01.networking
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select uat || tf workspace new uat
      - tf apply -auto-approve
      - cd ../02.backends
      - tf init
      - tf workspace select uat || tf workspace new uat
      - tf apply -auto-approve
      - cd ../03.api
      - tf init
      - tf workspace select uat || tf workspace new uat
      - tf apply -auto-approve
    environment:
      TF_VAR_access_key:
        from_secret: jaqu_staging_aws_access_key_id
      TF_VAR_secret_key:
        from_secret: jaqu_staging_aws_secret_access_key
      TF_VAR_master_access_key:
        from_secret: jaqu_master_aws_access_key_id
      TF_VAR_master_secret_key:
        from_secret: jaqu_master_aws_secret_access_key
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_staging_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_staging_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_NAME: jaqu-staging
      GIT_PRIVATE_SSH:
        from_secret: jaqu_lower_github_private_key
    when:
      event:
        - push

  # Invokes lambda function with $LATEST alias to deploy schema migrations prior to code deploy rollover
  - name: apply db schema migrations
    image: alpine:3.11.6
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - >
        aws lambda invoke --invocation-type RequestResponse --function-name payments-lambda-uat --payload "{\"requestContext\": {\"identity\": {}},\"httpMethod\": \"POST\",\"path\": \"/v1/migrate-db\", \"multiValueHeaders\":{\"x-correlation-id\":[\"f09c6856-9746-4d48-813f-3a31f25f96a2\"]}}" output.json --profile target_acc
      - status_code=$(cat output.json | jq '.statusCode')
      - if [ $status_code == "200" ]; then exit 0; else exit 1; fi
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_staging_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_staging_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_ROLE: arn:aws:iam::360470905865:role/jaqu-stagingServiceRole
    when:
      event:
        - push

  - name: codedeploy api uat
    image: alpine:3.11.6
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/CodeDeploy/deploy_lambda.sh . --profile target_acc
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/CodeDeploy/deploy_dangling_payments.sh . --profile target_acc
      - bash deploy_lambda.sh
      - bash deploy_dangling_payments.sh
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_staging_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_staging_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_ROLE: arn:aws:iam::360470905865:role/jaqu-stagingServiceRole
      PROJECT: payments
      DEPLOY_ENVIRONMENT: uat
      LAMBDA_BUCKET: jaqu-shared-project-lambda-bucket
    when:
      event:
        - push


  ################################################# End of UAT Environment Steps #######################################################

---

################################################### Start Prod Environment Steps ########################################################
kind: pipeline
type: docker
name: payments-api-prod

trigger:
  branch:
    - master
  event:
    - pull_request
    - push
concurrency:
  limit: 1

volumes:
  - name: package_directory
    temp: {}

steps:

  - name: plan updates into prod
    image: hashicorp/terraform:0.12.23
    volumes:
      - name: package_directory
        path: /opt/package
    commands:
      - apk add --update bash python python-dev py-pip build-base jq wget
      - pip install awscli
      - mkdir ~/.ssh
      - echo -e "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $SRC_AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - LAMBDA_FUNCTION=payments-lambda-preprod
      - ENV=preprod
      - SIGNED_URL=`aws lambda get-function --profile target_acc --function-name $LAMBDA_FUNCTION --qualifier $ENV| jq --raw-output '.Code.Location'`
      - VERSION=`aws lambda get-function --profile target_acc --function-name $LAMBDA_FUNCTION --qualifier $ENV| jq --raw-output '.Configuration.Version'`
      - wget -O /opt/package/$LAMBDA_FUNCTION-$VERSION.zip $SIGNED_URL
      - export TF_VAR_lambda_file=/opt/package/$LAMBDA_FUNCTION-$VERSION.zip
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - git checkout prod_live
      - cd terraform-iac/projects/payments/layers/01.networking
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select prod || tf workspace new prod
      - tf plan
      - cd ../02.backends
      - tf init
      - tf workspace select prod || tf workspace new prod
      - tf plan
      - cd ../03.api
      - tf init
      - tf workspace select prod || tf workspace new prod
      - tf plan
    environment:
      TF_VAR_access_key:
        from_secret: jaqu_prod_aws_access_key_id
      TF_VAR_secret_key:
        from_secret: jaqu_prod_aws_secret_access_key
      TF_VAR_master_access_key:
        from_secret: jaqu_master_aws_access_key_id
      TF_VAR_master_secret_key:
        from_secret: jaqu_master_aws_secret_access_key
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_prod_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_prod_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      SRC_AWS_ACCOUNT_ROLE: arn:aws:iam::360470905865:role/jaqu-stagingServiceRole
      AWS_ACCOUNT_NAME: jaqu-prod
      GIT_PRIVATE_SSH:
        from_secret: jaqu_lower_github_private_key
    when:
      event:
        - pull_request

  - name: provisioning warning
    image: docker:19.03.11-git
    commands:
      - echo "Pipeline failed. If a deployment is being made for the first time into an environment terraform backends will not yet exist which means this is to be expected. If not terraform related, please see logs for further details"
    when:
      status:
        - failure

  # Invoke terraform scripts to deploy lambda function
  - name: deploy to prod
    image: hashicorp/terraform:0.12.23
    volumes:
      - name: package_directory
        path: /opt/package
    commands:
      - apk add --update bash python python-dev py-pip build-base jq wget
      - pip install awscli
      - mkdir ~/.ssh
      - echo -e "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $SRC_AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - LAMBDA_FUNCTION=payments-lambda-preprod
      - ENV=preprod
      - SIGNED_URL=`aws lambda get-function --profile target_acc --function-name $LAMBDA_FUNCTION --qualifier $ENV| jq --raw-output '.Code.Location'`
      - VERSION=`aws lambda get-function --profile target_acc --function-name $LAMBDA_FUNCTION --qualifier $ENV| jq --raw-output '.Configuration.Version'`
      - wget -O /opt/package/$LAMBDA_FUNCTION-$VERSION.zip $SIGNED_URL
      - export TF_VAR_lambda_file=/opt/package/$LAMBDA_FUNCTION-$VERSION.zip
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - git checkout prod_live
      - cd terraform-iac/projects/payments/layers/01.networking
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select prod || tf workspace new prod
      - tf apply -auto-approve
      - cd ../02.backends
      - tf init
      - tf workspace select prod || tf workspace new prod
      - tf apply -auto-approve
      - cd ../03.api
      - tf init
      - tf workspace select prod || tf workspace new prod
      - tf apply -auto-approve
    environment:
      TF_VAR_access_key:
        from_secret: jaqu_prod_aws_access_key_id
      TF_VAR_secret_key:
        from_secret: jaqu_prod_aws_secret_access_key
      TF_VAR_master_access_key:
        from_secret: jaqu_master_aws_access_key_id
      TF_VAR_master_secret_key:
        from_secret: jaqu_master_aws_secret_access_key
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_prod_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_prod_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      SRC_AWS_ACCOUNT_ROLE: arn:aws:iam::360470905865:role/jaqu-stagingServiceRole
      AWS_ACCOUNT_NAME: jaqu-prod
      GIT_PRIVATE_SSH:
        from_secret: jaqu_lower_github_private_key
    when:
      event:
        - push

  # Invokes lambda function with $LATEST alias to deploy schema migrations prior to code deploy rollover
  - name: apply db schema migrations
    image: alpine:3.11.6
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - >
        aws lambda invoke --invocation-type RequestResponse --function-name payments-lambda-prod --payload "{\"requestContext\": {\"identity\": {}},\"httpMethod\": \"POST\",\"path\": \"/v1/migrate-db\", \"multiValueHeaders\":{\"x-correlation-id\":[\"f09c6856-9746-4d48-813f-3a31f25f96a2\"]}}" output.json --profile target_acc
      - status_code=$(cat output.json | jq '.statusCode')
      - if [ $status_code == "200" ]; then exit 0; else exit 1; fi
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_prod_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_prod_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_ROLE: arn:aws:iam::286199435714:role/jaqu-prodServiceRole
    when:
      event:
        - push

  - name: codedeploy api prod
    image: alpine:3.11.6
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/CodeDeploy/deploy_lambda.sh . --profile target_acc
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/CodeDeploy/deploy_dangling_payments.sh . --profile target_acc
      - bash deploy_lambda.sh
      - bash deploy_dangling_payments.sh
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_prod_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_prod_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_ROLE: arn:aws:iam::286199435714:role/jaqu-prodServiceRole
      PROJECT: payments
      DEPLOY_ENVIRONMENT: prod
      LAMBDA_BUCKET: jaqu-shared-project-lambda-bucket
    when:
      event:
        - push

  # subscribe to operational monitoring alert in prod
  - name: subscribe to operational monitoring alert in prod
    image: alpine:3.11.6
    commands:
      - apk add --update python3 groff
      - pip3 install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - python3 ./ci-cd-resources/subscribe_to_alert_topics_iac_restructure.py -e freeable-memory -e 4xx -e usage -e evictions -e csv -i prod -i payments ISSupport-CAZ@informed.com
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_prod_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_prod_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_ROLE: arn:aws:iam::286199435714:role/jaqu-prodServiceRole
      PROJECT: payments
      DEPLOY_ENVIRONMENT: prod
    when:
      event:
        - push

  ################################################# End of Prod Environment Steps #######################################################

  ################################################ Secrets #########################################################

---
kind: secret
name: jaqu_lower_aws_access_key_id
get:
  path: /build-tools/drone
  name: awsLowerAccessKeyId

---
kind: secret
name: jaqu_lower_aws_secret_access_key
get:
  path: /build-tools/drone
  name: awsLowerSecretAccessKey

---
kind: secret
name: jaqu_controlled_aws_access_key_id
get:
  path: /build-tools/drone
  name: awsControlledAccessKeyId

---
kind: secret
name: jaqu_controlled_aws_secret_access_key
get:
  path: /build-tools/drone
  name: awsControlledSecretAccessKey

---
kind: secret
name: jaqu_staging_aws_access_key_id
get:
  path: /build-tools/drone
  name: awsStagingAccessKeyId

---
kind: secret
name: jaqu_staging_aws_secret_access_key
get:
  path: /build-tools/drone
  name: awsStagingSecretAccessKey

---
kind: secret
name: jaqu_prod_aws_access_key_id
get:
  path: /build-tools/drone
  name: awsProdAccessKeyId

---
kind: secret
name: jaqu_prod_aws_secret_access_key
get:
  path: /build-tools/drone
  name: awsProdSecretAccessKey

---
kind: secret
name: jaqu_master_aws_access_key_id
get:
  path: /build-tools/drone
  name: awsMasterAccessKeyId

---
kind: secret
name: jaqu_master_aws_secret_access_key
get:
  path: /build-tools/drone
  name: awsMasterSecretAccessKey

---
kind: secret
name: jaqu_lower_sonar_host
get:
  path: /build-tools/drone
  name: sonarHost

---
kind: secret
name: jaqu_lower_sonar_token
get:
  path: /build-tools/drone
  name: sonarToken

---
kind: secret
name: jaqu_lower_github_private_key
get:
  path: /build-tools/drone
  name: githubPrivateKey

---
kind: secret
name: jaqu_lower_nexus_url
get:
  path: /build-tools/drone
  name: nexusUrl

---
kind: secret
name: jaqu_lower_nexus_username
get:
  path: /build-tools/drone
  name: nexusUsername

---
kind: secret
name: jaqu_lower_nexus_password
get:
  path: /build-tools/drone
  name: nexusPassword

---
kind: secret
name: charge_settlement_id
get:
  path: /build-tools/drone
  name: chargeSettlementId

---
kind: secret
name: charge_settlement_secret
get:
  path: /build-tools/drone
  name: chargeSettlementSecret

---
kind: secret
name: charge_settlement_cognito_id
get:
  path: /build-tools/drone
  name: chargeSettlementCognitoId

---
kind: secret
name: charge_settlement_id_St
get:
  path: /build-tools/drone
  name: chargeSettlementIdSt

---
kind: secret
name: charge_settlement_secret_St
get:
  path: /build-tools/drone
  name: chargeSettlementSecretSt


  ################################################ End Secrets #########################################################