CREATE TABLE IF NOT EXISTS CAZ_PAYMENT_AUDIT.T_CLEAN_AIR_ZONE_PAYMENT_MASTER(
    CLEAN_AIR_ZONE_PAYMENT_MASTER_ID uuid PRIMARY KEY NOT NULL,
    VRN VARCHAR(15) NOT NULL,
    CLEAN_AIR_ZONE_ID uuid NOT NULL
);

ALTER TABLE CAZ_PAYMENT_AUDIT.T_CLEAN_AIR_ZONE_PAYMENT_MASTER DROP CONSTRAINT IF EXISTS master_unique;
ALTER TABLE CAZ_PAYMENT_AUDIT.T_CLEAN_AIR_ZONE_PAYMENT_MASTER ADD CONSTRAINT master_unique UNIQUE(VRN, CLEAN_AIR_ZONE_ID);

CREATE TABLE IF NOT EXISTS CAZ_PAYMENT_AUDIT.T_CLEAN_AIR_ZONE_PAYMENT_DETAIL(
    T_CLEAN_AIR_ZONE_PAYMENT_DETAIL_ID uuid PRIMARY KEY NOT NULL,
    CLEAN_AIR_ZONE_PAYMENT_MASTER_ID uuid REFERENCES CAZ_PAYMENT_AUDIT.T_CLEAN_AIR_ZONE_PAYMENT_MASTER(CLEAN_AIR_ZONE_PAYMENT_MASTER_ID),
    TRAVEL_DATE DATE,
    PAYMENT_STATUS VARCHAR(64),
    TARIFF_CODE VARCHAR(255),
    CHARGE INTEGER,
    CASE_REFERENCE VARCHAR(255),
    UPDATE_ACTOR VARCHAR(32),
    ENTRANT_PAYMENT_INSERT_TIMESTAMP TIMESTAMP,
    ENTRANT_PAYMENT_UPDATE_TIMESTAMP TIMESTAMP,
    PAYMENT_ID uuid REFERENCES CAZ_PAYMENT.T_PAYMENT(PAYMENT_ID),
    CENTRAL_REFERENCE_NUMBER BIGINT,
    PAYMENT_INSERT_TIMESTAMP TIMESTAMP,
    PAYMENT_UPDATE_TIMESTAMP TIMESTAMP,
    PAYMENT_PROVIDER_ID VARCHAR(255),
    PAYMENT_PROVIDER_STATUS VARCHAR(64),
    LATEST BOOLEAN
);

-- set permissions for tables
REVOKE ALL ON CAZ_PAYMENT_AUDIT.T_CLEAN_AIR_ZONE_PAYMENT_MASTER FROM public;
REVOKE ALL ON CAZ_PAYMENT_AUDIT.T_CLEAN_AIR_ZONE_PAYMENT_DETAIL FROM public;
GRANT SELECT ON CAZ_PAYMENT_AUDIT.T_CLEAN_AIR_ZONE_PAYMENT_MASTER TO public;
GRANT SELECT ON CAZ_PAYMENT_AUDIT.T_CLEAN_AIR_ZONE_PAYMENT_DETAIL TO public;

-- define functions

CREATE OR REPLACE FUNCTION CAZ_PAYMENT_AUDIT.entrant_master_detail() RETURNS TRIGGER AS $body$
DECLARE
    master_match INTEGER;
	master_id uuid;
	ep_latest boolean;
BEGIN
	master_match := COUNT(*) FROM CAZ_PAYMENT_AUDIT.T_CLEAN_AIR_ZONE_PAYMENT_MASTER WHERE VRN = NEW.VRN AND CLEAN_AIR_ZONE_ID = NEW.CLEAN_AIR_ZONE_ID;
    IF (master_match IS NOT DISTINCT FROM 0) THEN
        INSERT INTO CAZ_PAYMENT_AUDIT.T_CLEAN_AIR_ZONE_PAYMENT_MASTER (CLEAN_AIR_ZONE_PAYMENT_MASTER_ID, VRN, CLEAN_AIR_ZONE_ID) 
        VALUES (uuid_generate_v1mc(), NEW.VRN, NEW.CLEAN_AIR_ZONE_ID);
    END IF;
	SELECT CLEAN_AIR_ZONE_PAYMENT_MASTER_ID INTO master_id FROM CAZ_PAYMENT_AUDIT.T_CLEAN_AIR_ZONE_PAYMENT_MASTER WHERE VRN = NEW.VRN AND CLEAN_AIR_ZONE_ID = NEW.CLEAN_AIR_ZONE_ID;
	SELECT LATEST INTO ep_latest FROM CAZ_PAYMENT.T_CLEAN_AIR_ZONE_ENTRANT_PAYMENT_MATCH WHERE CLEAN_AIR_ZONE_ENTRANT_PAYMENT_ID = NEW.CLEAN_AIR_ZONE_ENTRANT_PAYMENT_ID;
	INSERT INTO CAZ_PAYMENT_AUDIT.T_CLEAN_AIR_ZONE_PAYMENT_DETAIL (T_CLEAN_AIR_ZONE_PAYMENT_DETAIL_ID, CLEAN_AIR_ZONE_PAYMENT_MASTER_ID, TRAVEL_DATE, PAYMENT_STATUS, TARIFF_CODE, CHARGE, CASE_REFERENCE, UPDATE_ACTOR, ENTRANT_PAYMENT_INSERT_TIMESTAMP, ENTRANT_PAYMENT_UPDATE_TIMESTAMP, LATEST)
	VALUES (uuid_generate_v1mc(), master_id, NEW.TRAVEL_DATE, NEW.PAYMENT_STATUS, NEW.TARIFF_CODE, NEW.CHARGE, NEW.CASE_REFERENCE, NEW.UPDATE_ACTOR, NEW.INSERT_TIMESTAMP, NEW.UPDATE_TIMESTAMP, ep_latest);
    RETURN NEW;
 
EXCEPTION
    WHEN data_exception THEN
        RAISE WARNING '[CAZ_PAYMENT_AUDIT.POPULATE_MASTER_FUNC] - UDF ERROR [DATA EXCEPTION] - SQLSTATE: %, SQLERRM: %',SQLSTATE,SQLERRM;
        RETURN NULL;
    WHEN unique_violation THEN
        RAISE WARNING '[CAZ_PAYMENT_AUDIT.POPULATE_MASTER_FUNC] - UDF ERROR [UNIQUE] - SQLSTATE: %, SQLERRM: %',SQLSTATE,SQLERRM;
        RETURN NULL;
    WHEN OTHERS THEN
        RAISE WARNING '[CAZ_PAYMENT_AUDIT.POPULATE_MASTER_FUNC] - UDF ERROR [OTHER] - SQLSTATE: %, SQLERRM: %',SQLSTATE,SQLERRM;
        RETURN NULL;
END;
$body$
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = pg_catalog, public, CAZ_PAYMENT_AUDIT;

CREATE OR REPLACE FUNCTION CAZ_PAYMENT_AUDIT.payment_detail() RETURNS TRIGGER AS $body$
BEGIN
    INSERT INTO CAZ_PAYMENT_AUDIT.T_CLEAN_AIR_ZONE_PAYMENT_DETAIL (T_CLEAN_AIR_ZONE_PAYMENT_DETAIL_ID, PAYMENT_ID, CENTRAL_REFERENCE_NUMBER, PAYMENT_INSERT_TIMESTAMP, PAYMENT_UPDATE_TIMESTAMP, PAYMENT_PROVIDER_ID, PAYMENT_PROVIDER_STATUS) 
    VALUES (uuid_generate_v1mc(), NEW.PAYMENT_ID, NEW.CENTRAL_REFERENCE_NUMBER, NEW.INSERT_TIMESTAMP, NEW.UPDATE_TIMESTAMP, NEW.PAYMENT_PROVIDER_ID, NEW.PAYMENT_PROVIDER_STATUS);
	RETURN NEW;
END;
$body$
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = pg_catalog, public, CAZ_PAYMENT_AUDIT;


-- create triggers

-- First drop existing triggers if exist for idempotency
DROP TRIGGER IF EXISTS master_detail_trigger_payment ON CAZ_PAYMENT.T_PAYMENT;
DROP TRIGGER IF EXISTS master_detail_trigger_entrant_payment ON CAZ_PAYMENT.T_CLEAN_AIR_ZONE_ENTRANT_PAYMENT;

CREATE TRIGGER master_detail_trigger_payment
AFTER INSERT OR UPDATE ON CAZ_PAYMENT.T_PAYMENT
FOR EACH ROW EXECUTE PROCEDURE CAZ_PAYMENT_AUDIT.payment_detail();

CREATE TRIGGER master_detail_trigger_entrant_payment
AFTER INSERT OR UPDATE ON CAZ_PAYMENT.T_CLEAN_AIR_ZONE_ENTRANT_PAYMENT
FOR EACH ROW EXECUTE PROCEDURE CAZ_PAYMENT_AUDIT.entrant_master_detail();