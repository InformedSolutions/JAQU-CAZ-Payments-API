databaseChangeLog:
  - changeSet:
      id: 0001.1-1.0
      author: radoslaw.morytko
      changes:
        - sql:
            comment: Conditionally enables uuid-ossp extension
            dbms: postgresql
            endDelimiter: ;GO
            splitStatements: true
            sql: create extension if not exists "uuid-ossp";
  - changeSet:
      id: 0001.2-1.0
      author: radoslaw.morytko
      preConditions:
        - onFail: MARK_RAN
        - not:
            tableExists:
              schemaName: audit
              tableName: logged_actions
      changes:
        - sqlFile:
            dbms: postgresql
            encoding: utf8
            endDelimiter: ;GO
            path: ../rawSql/0001-1.0-create_audit_log_table_and_trigger.sql
            relativeToChangelogFile: true
            splitStatements: true
            stripComments: true
  - changeSet:
      id: 0001.3-1.0
      author: radoslaw.morytko
      changes:
        - createTable:
            tableName: VEHICLE_ENTRANT
            columns:
              - column:
                  name: VEHICLE_ENTRANT_ID
                  type: uuid
                  defaultValueComputed: uuid_generate_v1mc()
                  constraints:
                    primaryKey: true
                    nullable: false
                    primaryKeyName: vehicle_entrant_vehicle_entrant_id_pkey
              - column:
                  name: CAZ_ENTRY_TIMESTAMP
                  type: datetime
                  constraints:
                    nullable: false
              - column:
                  name: CAZ_ID
                  type: uuid
                  constraints:
                    nullable: false
              - column:
                  name: VRN
                  type: varchar(15)
                  constraints:
                    nullable: false
              - column:
                  name: CAZ_ENTRY_DATE
                  type: date
                  constraints:
                    nullable: false
              - column:
                  name: INSERT_TIMESTAMP
                  type: timestamp
                  defaultValueComputed: CURRENT_TIMESTAMP
                  constraints:
                    nullable: false
        - addUniqueConstraint:
            columnNames: CAZ_ENTRY_DATE,CAZ_ID,VRN
            constraintName: vehicle_entrant_caz_entry_date_caz_id_vrn_key
            tableName: VEHICLE_ENTRANT
        - createTable:
            tableName: PAYMENT
            columns:
              - column:
                  name: PAYMENT_ID
                  type: uuid
                  defaultValueComputed: uuid_generate_v1mc()
                  constraints:
                    primaryKey: true
                    nullable: false
                    primaryKeyName: payment_payment_id_pkey
              - column:
                  name: USER_ID
                  type: uuid
                  constraints:
                    nullable: true
                  remarks: Contains the value of the AWS Cognito 'subject' field
              - column:
                  name: PAYMENT_METHOD
                  type: varchar(32)
                  constraints:
                    nullable: false
                  remarks: Contains the value of an enumrated type [CREDIT_DEBIT_CARD, DIRECT_DEBIT]
              - column:
                  name: PAYMENT_PROVIDER_ID
                  type: varchar(255)
                  constraints:
                    nullable: true
                  remarks: GOV.UK Pay payment id
              - column:
                  name: PAYMENT_PROVIDER_STATUS
                  type: varchar(64)
                  constraints:
                    nullable: true
                  remarks: GOV.UK Pay payment_status (the result of a payment transaction assigned by GOV.UK Pay)
              - column:
                  name: TOTAL_PAID
                  type: integer
                  constraints:
                    nullable: false
              - column:
                  name: PAYMENT_SUBMITTED_TIMESTAMP
                  type: timestamp
                  constraints:
                    nullable: true
                  remarks: Timestamp indicating the date/time on which a payment was submitted to GOV.UK for authorisation/processing
              - column:
                  name: PAYMENT_AUTHORISED_TIMESTAMP
                  type: timestamp
                  constraints:
                    nullable: true
                  remarks: >-
                          Timestamp indicating the date/time on which a payment was authorised by GOV.UK Pay (SUCCESS response).
                          The Vehicle_Entrant_Payment.payment_status field will only be assigned a status of 'paid' when this field is populated.
              - column:
                  name: INSERT_TIMESTAMP
                  type: timestamp
                  defaultValueComputed: CURRENT_TIMESTAMP
                  constraints:
                    nullable: false
              - column:
                  name: UPDATE_TIMESTAMP
                  type: timestamp
                  defaultValueComputed: CURRENT_TIMESTAMP
                  constraints:
                    nullable: false
        - createTable:
            tableName: VEHICLE_ENTRANT_PAYMENT
            columns:
              - column:
                  name: VEHICLE_ENTRANT_PAYMENT_ID
                  type: uuid
                  defaultValueComputed: uuid_generate_v1mc()
                  constraints:
                    primaryKey: true
                    nullable: false
                    primaryKeyName: vehicle_entrant_payment_vehicle_entrant_payment_id_pkey
              - column:
                  name: VEHICLE_ENTRANT_ID
                  type: uuid
                  constraints:
                    foreignKeyName: vehicle_entrant_vehicle_entrant_id_fkey
                    references: VEHICLE_ENTRANT(VEHICLE_ENTRANT_ID)
                    nullable: true
                    unique: true
                  remarks: This field is non-null when a matching row in VEHICLE_ENTRANT is found and payment is successful
              - column:
                  name: PAYMENT_ID
                  type: uuid
                  constraints:
                    foreignKeyName: payment_payment_id
                    references: PAYMENT(PAYMENT_ID)
                    nullable: false
              - column:
                  name: VRN
                  type: varchar(15)
                  constraints:
                    nullable: false
              - column:
                  name: CAZ_ID
                  type: uuid
                  constraints:
                    nullable: false
              - column:
                  name: TRAVEL_DATE
                  type: date
                  constraints:
                    nullable: false
              - column:
                  name: CHARGE_PAID
                  type: integer
                  constraints:
                    nullable: false
              - column:
                  name: PAYMENT_STATUS
                  type: varchar(64)
                  constraints:
                    nullable: false
              - column:
                  name: CASE_REFERENCE
                  type: varchar(255)
                  constraints:
                    nullable: true
              - column:
                  name: INSERT_TIMESTAMP
                  type: timestamp
                  defaultValueComputed: CURRENT_TIMESTAMP
                  constraints:
                    nullable: false
              - column:
                  name: UPDATE_TIMESTAMP
                  type: timestamp
                  defaultValueComputed: CURRENT_TIMESTAMP
                  constraints:
                    nullable: false
  - changeSet:
      id: 0001.4-1.0
      author: radoslaw.morytko
      changes:
        - sql:
            comment: Create Audit Trigger on PAYMENT, VEHICLE_ENTRANT and VEHICLE_ENTRANT_PAYMENT
            dbms: postgresql
            endDelimiter: ;GO
            splitStatements: true
            sql: CREATE TRIGGER PAYMENT_AUDIT
              AFTER INSERT OR UPDATE OR DELETE ON PAYMENT
              FOR EACH ROW EXECUTE PROCEDURE audit.if_modified_func();

              CREATE TRIGGER VEHICLE_ENTRANT_AUDIT
              AFTER INSERT OR UPDATE OR DELETE ON VEHICLE_ENTRANT
              FOR EACH ROW EXECUTE PROCEDURE audit.if_modified_func();

              CREATE TRIGGER VEHICLE_ENTRANT_PAYMENT_AUDIT
              AFTER INSERT OR UPDATE OR DELETE ON VEHICLE_ENTRANT_PAYMENT
              FOR EACH ROW EXECUTE PROCEDURE audit.if_modified_func();
            stripComments: true
